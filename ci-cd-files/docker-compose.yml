x-backend-env: &bot-env
  ENVIRONMENT: ${ENVIRONMENT}
  APP_HOST: ${APP_HOST}
  APP_PORT: ${APP_PORT}
  REDIS_HOST: ${REDIS_HOST}
  REDIS_PORT: ${REDIS_PORT}
  REDIS_PASSWORD: ${REDIS_PASSWORD}
  REDIS_USER: ${REDIS_USER}
  REDIS_USER_PASSWORD: ${REDIS_USER_PASSWORD}
  RABBITMQ_USER: ${RABBITMQ_USER}
  RABBITMQ_PASS: ${RABBITMQ_USER}
  POSTGRES_HOST: ${POSTGRES_HOST}
  POSTGRES_PORT: ${POSTGRES_PORT}
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_DB: ${POSTGRES_DB}

services:
  backend:
    dns:
      - 8.8.8.8
      - 1.1.1.1
    build:
      context: ..
      dockerfile: ci-cd-files/Dockerfile
      target: production
      args:
        MODE: prod
    command: uvicorn src.app.main:app --reload --host ${APP_HOST} --port ${APP_PORT} --log-level debug
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      <<: *bot-env
      NO_PROXY: 'api.openai.com, llm.api.cloud.yandex.net, api.proxyapi.ru'
    ports:
      - "${APP_PORT}:${APP_PORT}"
    volumes:
      - ..:/app
    depends_on:
      - redis
      - rabbitmq
      - postgres
    restart: always
    networks:
      - network

  redis:
    image: redis:latest
    restart: always
    container_name: redis
    environment: *bot-env
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - ./redisdata:/data
      - ../redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment: *bot-env
    networks:
      - network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    restart: always
    networks:
      - network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rmq-consumer:
    build:
      context: ..
      dockerfile: ci-cd-files/Dockerfile
      target: production
      args:
        MODE: prod
    container_name: rmq-consumer
    command: sh -c "PYTHONPATH=/app python /app/src/app/integrations/rmq/consumer.py"
    restart: always
    environment: *bot-env
    volumes:
      - ..:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - network
      
networks:
  network:
    external: true
